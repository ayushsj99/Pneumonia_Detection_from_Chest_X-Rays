{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":23812,"sourceType":"datasetVersion","datasetId":17810}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    print(os.path.join(dirname))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-15T12:46:53.540860Z","iopub.execute_input":"2025-09-15T12:46:53.541197Z","iopub.status.idle":"2025-09-15T12:47:00.555192Z","shell.execute_reply.started":"2025-09-15T12:46:53.541175Z","shell.execute_reply":"2025-09-15T12:47:00.554337Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.optimizers import Adam\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nprint(\"Setup Complete!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:05:04.566441Z","iopub.execute_input":"2025-09-15T15:05:04.566736Z","iopub.status.idle":"2025-09-15T15:05:04.985936Z","shell.execute_reply.started":"2025-09-15T15:05:04.566716Z","shell.execute_reply":"2025-09-15T15:05:04.985297Z"}},"outputs":[{"name":"stdout","text":"Setup Complete!\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"# Define paths to the data directories\nbase_dir = '/kaggle/input/chest-xray-pneumonia/chest_xray/chest_xray/'\ntrain_dir = os.path.join(base_dir, 'train')\nval_dir = os.path.join(base_dir, 'val')\ntest_dir = os.path.join(base_dir, 'test')\n\n# Count the number of images in each class for the training set\ntrain_normal_count = len(os.listdir(os.path.join(train_dir, 'NORMAL')))\ntrain_pneumonia_count = len(os.listdir(os.path.join(train_dir, 'PNEUMONIA')))\n\nprint(f\"Training Set:\")\nprint(f\"  Normal images: {train_normal_count}\")\nprint(f\"  Pneumonia images: {train_pneumonia_count}\")\nprint(\"-\" * 30)\n\n# You can do the same for val and test sets to see the full picture","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:05:09.358023Z","iopub.execute_input":"2025-09-15T15:05:09.358852Z","iopub.status.idle":"2025-09-15T15:05:09.459128Z","shell.execute_reply.started":"2025-09-15T15:05:09.358818Z","shell.execute_reply":"2025-09-15T15:05:09.458504Z"}},"outputs":[{"name":"stdout","text":"Training Set:\n  Normal images: 1342\n  Pneumonia images: 3876\n------------------------------\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"# Set image dimensions and batch size\nIMG_WIDTH, IMG_HEIGHT = 150, 150\nBATCH_SIZE = 32\n\n# Create an ImageDataGenerator for the training set with data augmentation\ntrain_datagen = ImageDataGenerator(\n    rescale=1./255,          # Normalize pixel values\n    rotation_range=20,       # Randomly rotate images\n    width_shift_range=0.1,   # Randomly shift images horizontally\n    height_shift_range=0.1,  # Randomly shift images vertically\n    shear_range=0.1,         # Shear transformation\n    zoom_range=0.1,          # Randomly zoom in\n    horizontal_flip=True,    # Randomly flip images\n    fill_mode='nearest'\n)\n\n# Create an ImageDataGenerator for validation and test sets (only normalization)\n# IMPORTANT: We don't augment validation or test data!\nval_test_datagen = ImageDataGenerator(rescale=1./255)\n\n# Create data generators that will read images from the directories\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=(IMG_WIDTH, IMG_HEIGHT),\n    batch_size=BATCH_SIZE,\n    class_mode='binary' # Because we have two classes (Normal/Pneumonia)\n)\n\nvalidation_generator = val_test_datagen.flow_from_directory(\n    val_dir,\n    target_size=(IMG_WIDTH, IMG_HEIGHT),\n    batch_size=BATCH_SIZE,\n    class_mode='binary'\n)\n\ntest_generator = val_test_datagen.flow_from_directory(\n    test_dir,\n    target_size=(IMG_WIDTH, IMG_HEIGHT),\n    batch_size=BATCH_SIZE,\n    class_mode='binary',\n    shuffle=False # Keep test data in order for evaluation\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:05:09.665534Z","iopub.execute_input":"2025-09-15T15:05:09.665781Z","iopub.status.idle":"2025-09-15T15:05:13.741750Z","shell.execute_reply.started":"2025-09-15T15:05:09.665764Z","shell.execute_reply":"2025-09-15T15:05:13.741154Z"}},"outputs":[{"name":"stdout","text":"Found 5216 images belonging to 2 classes.\nFound 16 images belonging to 2 classes.\nFound 624 images belonging to 2 classes.\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"model = Sequential([\n    # First convolutional block\n    Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_WIDTH, IMG_HEIGHT, 3)),\n    MaxPooling2D((2, 2)),\n\n    # Second convolutional block\n    Conv2D(64, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n\n    # Third convolutional block\n    Conv2D(128, (3, 3), activation='relu'),\n    MaxPooling2D((2, 2)),\n\n    # Flatten the results to feed into a dense layer\n    Flatten(),\n\n    # Dense layer for classification\n    Dense(512, activation='relu'),\n    Dropout(0.5), # Add dropout to reduce overfitting\n\n    # Output layer\n    Dense(1, activation='sigmoid') # Sigmoid for binary classification\n])\n\nmodel.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:05:28.167531Z","iopub.execute_input":"2025-09-15T15:05:28.167789Z","iopub.status.idle":"2025-09-15T15:05:28.235319Z","shell.execute_reply.started":"2025-09-15T15:05:28.167771Z","shell.execute_reply":"2025-09-15T15:05:28.234752Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_3\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_3\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m148\u001b[0m, \u001b[38;5;34m148\u001b[0m, \u001b[38;5;34m32\u001b[0m)   │           \u001b[38;5;34m896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m74\u001b[0m, \u001b[38;5;34m74\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m72\u001b[0m, \u001b[38;5;34m72\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m36\u001b[0m, \u001b[38;5;34m36\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m34\u001b[0m, \u001b[38;5;34m34\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m17\u001b[0m, \u001b[38;5;34m17\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_3 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m36992\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │    \u001b[38;5;34m18,940,416\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │           \u001b[38;5;34m513\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">148</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">148</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)   │           <span style=\"color: #00af00; text-decoration-color: #00af00\">896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">74</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">74</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">72</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">72</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">36</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">36</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">34</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">34</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">17</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">17</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">36992</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │    <span style=\"color: #00af00; text-decoration-color: #00af00\">18,940,416</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">513</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m19,034,177\u001b[0m (72.61 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">19,034,177</span> (72.61 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m19,034,177\u001b[0m (72.61 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">19,034,177</span> (72.61 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"# Calculate class weights to handle imbalance\n# Formula: weight_for_class = (total_samples / (num_classes * num_samples_in_class))\ntotal_train_samples = train_normal_count + train_pneumonia_count\nweight_for_0 = (1 / train_normal_count) * (total_train_samples / 2.0)\nweight_for_1 = (1 / train_pneumonia_count) * (total_train_samples / 2.0)\n\nclass_weights = {0: weight_for_0, 1: weight_for_1}\n\nprint(f\"Class Weights: {class_weights}\")\n\n# Compile the model\nmodel.compile(\n    optimizer=Adam(learning_rate=0.0001),\n    loss='binary_crossentropy',\n    metrics=['accuracy', tf.keras.metrics.Precision(), tf.keras.metrics.Recall()]\n)\n\n# Train the model\n# history = model.fit(\n#     train_generator,\n#     steps_per_epoch=train_generator.samples // BATCH_SIZE,\n#     epochs=15, # Start with 15 epochs and see how it performs\n#     validation_data=validation_generator,\n#     validation_steps=validation_generator.samples // BATCH_SIZE,\n#     class_weight=class_weights\n# )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:05:47.490513Z","iopub.execute_input":"2025-09-15T15:05:47.491280Z","iopub.status.idle":"2025-09-15T15:05:47.507655Z","shell.execute_reply.started":"2025-09-15T15:05:47.491256Z","shell.execute_reply":"2025-09-15T15:05:47.507018Z"}},"outputs":[{"name":"stdout","text":"Class Weights: {0: 1.9441132637853948, 1: 0.6731166150670794}\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"# This code comes AFTER your model.fit() block\n\nprint(\"Training finished. Saving model...\")\n\n# The model will be saved in the HDF5 format. \n# You can also use the .keras extension for the newer format.\nmodel.save('/kaggle/working/pneumonia_detection_model.h5')\n\nprint(\"Model saved successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T14:23:34.982528Z","iopub.execute_input":"2025-09-15T14:23:34.983566Z","iopub.status.idle":"2025-09-15T14:23:35.485274Z","shell.execute_reply.started":"2025-09-15T14:23:34.983531Z","shell.execute_reply":"2025-09-15T14:23:35.484239Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Plot training history\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(len(acc))\n\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()\n\n# Evaluate on the test set\nprint(\"\\n--- Evaluating on Test Data ---\")\ntest_loss, test_acc, test_prec, test_recall = model.evaluate(test_generator)\nprint(f\"Test Accuracy: {test_acc*100:.2f}%\")\nprint(f\"Test Precision: {test_prec:.4f}\")\nprint(f\"Test Recall: {test_recall:.4f}\")\n\n# Generate a confusion matrix\nfrom sklearn.metrics import classification_report, confusion_matrix\n\npredictions = model.predict(test_generator)\npredicted_classes = (predictions > 0.5).astype(\"int32\")\n\ntrue_classes = test_generator.classes\nclass_labels = list(test_generator.class_indices.keys())\n\nprint(\"\\n--- Confusion Matrix ---\")\ncm = confusion_matrix(true_classes, predicted_classes)\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_labels, yticklabels=class_labels)\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()\n\nprint(\"\\n--- Classification Report ---\")\nprint(classification_report(true_classes, predicted_classes, target_names=class_labels))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T14:23:52.025862Z","iopub.execute_input":"2025-09-15T14:23:52.026684Z","iopub.status.idle":"2025-09-15T14:24:18.456828Z","shell.execute_reply.started":"2025-09-15T14:23:52.026644Z","shell.execute_reply":"2025-09-15T14:24:18.455319Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Using VGG16 by transfer learning to make a classification model","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.applications import VGG16\n\n# Create the base model from the pre-trained VGG16\nconv_base = VGG16(weights='imagenet',\n                  include_top=False, # <-- VERY IMPORTANT\n                  input_shape=(150, 150, 3))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:03:54.400928Z","iopub.execute_input":"2025-09-15T15:03:54.401605Z","iopub.status.idle":"2025-09-15T15:03:58.310304Z","shell.execute_reply.started":"2025-09-15T15:03:54.401581Z","shell.execute_reply":"2025-09-15T15:03:58.309206Z"}},"outputs":[{"name":"stderr","text":"I0000 00:00:1757948635.929051      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\nI0000 00:00:1757948635.929892      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n","output_type":"stream"},{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m58889256/58889256\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# Freeze the convolutional base\nconv_base.trainable = False","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:04:05.055026Z","iopub.execute_input":"2025-09-15T15:04:05.055719Z","iopub.status.idle":"2025-09-15T15:04:05.059299Z","shell.execute_reply.started":"2025-09-15T15:04:05.055694Z","shell.execute_reply":"2025-09-15T15:04:05.058454Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"from tensorflow.keras import layers\nfrom tensorflow.keras import models\n\nmodel_tl = models.Sequential([\n    conv_base, # Add the frozen VGG16 base\n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(1, activation='sigmoid') # Your output layer\n])\n\nmodel_tl.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:04:13.845787Z","iopub.execute_input":"2025-09-15T15:04:13.846557Z","iopub.status.idle":"2025-09-15T15:04:13.884403Z","shell.execute_reply.started":"2025-09-15T15:04:13.846533Z","shell.execute_reply":"2025-09-15T15:04:13.883882Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_2\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ vgg16 (\u001b[38;5;33mFunctional\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m512\u001b[0m)      │    \u001b[38;5;34m14,714,688\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_2 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8192\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │     \u001b[38;5;34m4,194,816\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │           \u001b[38;5;34m513\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ vgg16 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)      │    <span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8192</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │     <span style=\"color: #00af00; text-decoration-color: #00af00\">4,194,816</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">513</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m18,910,017\u001b[0m (72.14 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">18,910,017</span> (72.14 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,195,329\u001b[0m (16.00 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,195,329</span> (16.00 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m14,714,688\u001b[0m (56.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,714,688</span> (56.13 MB)\n</pre>\n"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"from tensorflow.keras.callbacks import TensorBoard\nimport datetime","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:04:19.442524Z","iopub.execute_input":"2025-09-15T15:04:19.443070Z","iopub.status.idle":"2025-09-15T15:04:19.450001Z","shell.execute_reply.started":"2025-09-15T15:04:19.443048Z","shell.execute_reply":"2025-09-15T15:04:19.449375Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# Create a unique log directory for this training run\nlog_dir = \"logs/fit/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n\n# Create the TensorBoard callback\n# histogram_freq=1 enables tracking of weight histograms\ntensorboard_callback = TensorBoard(log_dir=log_dir, histogram_freq=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:04:26.650936Z","iopub.execute_input":"2025-09-15T15:04:26.651472Z","iopub.status.idle":"2025-09-15T15:04:26.655073Z","shell.execute_reply.started":"2025-09-15T15:04:26.651434Z","shell.execute_reply":"2025-09-15T15:04:26.654504Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"from tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import TensorBoard # <-- 1. IMPORT\nimport datetime # <-- 1. IMPORT\n\n# Compile the new model\nmodel_tl.compile(\n    optimizer=Adam(learning_rate=0.0001),\n    loss='binary_crossentropy',\n    metrics=['accuracy', tf.keras.metrics.Precision(), tf.keras.metrics.Recall()]\n)\n\n# --- 2. CREATE THE CALLBACK ---\nlog_dir = \"logs/fit/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = TensorBoard(log_dir=log_dir, histogram_freq=1)\n# ------------------------------\n\n# Train the model\nhistory_transfer = model_tl.fit(\n    train_generator,\n    epochs=15,\n    validation_data=validation_generator,\n    class_weight=class_weights,\n    callbacks=[tensorboard_callback] # <-- 3. ADD THE CALLBACK HERE\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:08:19.840040Z","iopub.execute_input":"2025-09-15T15:08:19.840329Z","iopub.status.idle":"2025-09-15T15:27:07.449578Z","shell.execute_reply.started":"2025-09-15T15:08:19.840307Z","shell.execute_reply":"2025-09-15T15:27:07.448914Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 440ms/step - accuracy: 0.9184 - loss: 0.2024 - precision_3: 0.9779 - recall_3: 0.9115","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 493ms/step - accuracy: 0.9184 - loss: 0.2023 - precision_3: 0.9779 - recall_3: 0.9115 - val_accuracy: 0.9375 - val_loss: 0.1544 - val_precision_3: 1.0000 - val_recall_3: 0.8750\nEpoch 2/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m72s\u001b[0m 442ms/step - accuracy: 0.9341 - loss: 0.1757 - precision_3: 0.9821 - recall_3: 0.9288 - val_accuracy: 0.8750 - val_loss: 0.1680 - val_precision_3: 0.8750 - val_recall_3: 0.8750\nEpoch 3/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m72s\u001b[0m 444ms/step - accuracy: 0.9399 - loss: 0.1454 - precision_3: 0.9853 - recall_3: 0.9339 - val_accuracy: 0.9375 - val_loss: 0.1360 - val_precision_3: 1.0000 - val_recall_3: 0.8750\nEpoch 4/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m74s\u001b[0m 456ms/step - accuracy: 0.9281 - loss: 0.1680 - precision_3: 0.9801 - recall_3: 0.9214 - val_accuracy: 0.8750 - val_loss: 0.2070 - val_precision_3: 0.8000 - val_recall_3: 1.0000\nEpoch 5/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m73s\u001b[0m 445ms/step - accuracy: 0.9425 - loss: 0.1470 - precision_3: 0.9833 - recall_3: 0.9374 - val_accuracy: 0.8750 - val_loss: 0.1942 - val_precision_3: 0.8000 - val_recall_3: 1.0000\nEpoch 6/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 493ms/step - accuracy: 0.9432 - loss: 0.1335 - precision_3: 0.9847 - recall_3: 0.9384 - val_accuracy: 0.8750 - val_loss: 0.2040 - val_precision_3: 0.8000 - val_recall_3: 1.0000\nEpoch 7/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 489ms/step - accuracy: 0.9432 - loss: 0.1357 - precision_3: 0.9840 - recall_3: 0.9382 - val_accuracy: 0.8750 - val_loss: 0.1799 - val_precision_3: 0.8000 - val_recall_3: 1.0000\nEpoch 8/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m73s\u001b[0m 449ms/step - accuracy: 0.9464 - loss: 0.1358 - precision_3: 0.9836 - recall_3: 0.9433 - val_accuracy: 0.9375 - val_loss: 0.1304 - val_precision_3: 0.8889 - val_recall_3: 1.0000\nEpoch 9/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m72s\u001b[0m 442ms/step - accuracy: 0.9509 - loss: 0.1280 - precision_3: 0.9827 - recall_3: 0.9509 - val_accuracy: 1.0000 - val_loss: 0.1144 - val_precision_3: 1.0000 - val_recall_3: 1.0000\nEpoch 10/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m72s\u001b[0m 443ms/step - accuracy: 0.9504 - loss: 0.1372 - precision_3: 0.9863 - recall_3: 0.9464 - val_accuracy: 0.9375 - val_loss: 0.0997 - val_precision_3: 1.0000 - val_recall_3: 0.8750\nEpoch 11/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m74s\u001b[0m 451ms/step - accuracy: 0.9550 - loss: 0.1143 - precision_3: 0.9892 - recall_3: 0.9496 - val_accuracy: 0.8750 - val_loss: 0.1572 - val_precision_3: 0.8000 - val_recall_3: 1.0000\nEpoch 12/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m76s\u001b[0m 465ms/step - accuracy: 0.9535 - loss: 0.1231 - precision_3: 0.9874 - recall_3: 0.9496 - val_accuracy: 0.9375 - val_loss: 0.1162 - val_precision_3: 1.0000 - val_recall_3: 0.8750\nEpoch 13/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m75s\u001b[0m 459ms/step - accuracy: 0.9564 - loss: 0.1091 - precision_3: 0.9864 - recall_3: 0.9545 - val_accuracy: 0.9375 - val_loss: 0.0966 - val_precision_3: 1.0000 - val_recall_3: 0.8750\nEpoch 14/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m74s\u001b[0m 453ms/step - accuracy: 0.9489 - loss: 0.1179 - precision_3: 0.9859 - recall_3: 0.9450 - val_accuracy: 0.9375 - val_loss: 0.1305 - val_precision_3: 0.8889 - val_recall_3: 1.0000\nEpoch 15/15\n\u001b[1m163/163\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m73s\u001b[0m 448ms/step - accuracy: 0.9632 - loss: 0.1025 - precision_3: 0.9877 - recall_3: 0.9626 - val_accuracy: 1.0000 - val_loss: 0.1115 - val_precision_3: 1.0000 - val_recall_3: 1.0000\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"# This code comes AFTER your model.fit() block\n\nprint(\"Training finished. Saving model...\")\n\n# The model will be saved in the HDF5 format. \n# You can also use the .keras extension for the newer format.\nmodel_tl.save('/kaggle/working/pneumonia_detection_model_tl.h5')\n\nprint(\"Model saved successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:27:21.707124Z","iopub.execute_input":"2025-09-15T15:27:21.707934Z","iopub.status.idle":"2025-09-15T15:27:21.906065Z","shell.execute_reply.started":"2025-09-15T15:27:21.707907Z","shell.execute_reply":"2025-09-15T15:27:21.905278Z"}},"outputs":[{"name":"stdout","text":"Training finished. Saving model...\nModel saved successfully!\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"# Load the TensorBoard notebook extension\n%load_ext tensorboard\n\n# Launch TensorBoard and point it to the parent log directory\n%tensorboard --logdir logs/fit","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:28:50.171054Z","iopub.execute_input":"2025-09-15T15:28:50.171354Z","iopub.status.idle":"2025-09-15T15:28:50.180935Z","shell.execute_reply.started":"2025-09-15T15:28:50.171331Z","shell.execute_reply":"2025-09-15T15:28:50.180296Z"}},"outputs":[{"name":"stdout","text":"The tensorboard extension is already loaded. To reload it, use:\n  %reload_ext tensorboard\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Reusing TensorBoard on port 6006 (pid 523), started 0:00:12 ago. (Use '!kill 523' to kill it.)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"\n        (async () => {\n            const url = new URL(await google.colab.kernel.proxyPort(6006, {'cache': true}));\n            url.searchParams.set('tensorboardColab', 'true');\n            const iframe = document.createElement('iframe');\n            iframe.src = url;\n            iframe.setAttribute('width', '100%');\n            iframe.setAttribute('height', '800');\n            iframe.setAttribute('frameborder', 0);\n            document.body.appendChild(iframe);\n        })();\n    "},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"# This is the same evaluation code from before\n# Evaluate the model on the test set\ntest_loss, test_acc, test_prec, test_recall = model_tl.evaluate(test_generator)\nprint(f\"Transfer Learning - Test Accuracy: {test_acc*100:.2f}%\")\nprint(f\"Transfer Learning - Test Precision: {test_prec:.4f}\")\nprint(f\"Transfer Learning - Test Recall: {test_recall:.4f}\")\n\n# Generate the classification report and confusion matrix\n# ... (rest of your evaluation code)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T15:29:33.945493Z","iopub.execute_input":"2025-09-15T15:29:33.946069Z","iopub.status.idle":"2025-09-15T15:29:44.987540Z","shell.execute_reply.started":"2025-09-15T15:29:33.946051Z","shell.execute_reply":"2025-09-15T15:29:44.986925Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 437ms/step - accuracy: 0.8824 - loss: 0.3558 - precision_3: 0.5202 - recall_3: 0.6455\nTransfer Learning - Test Accuracy: 91.67%\nTransfer Learning - Test Precision: 0.9024\nTransfer Learning - Test Recall: 0.9718\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}